<apex:page title="Promotion" standardController="Promotion__c" extensions="Promotion_Controller" tabStyle="Promotion__c" sidebar="false" docType="html-5.0" standardStylesheets="false" showHeader="false">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="description" content="" />
        <meta name="author" content="" />
        
        <script src='https://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js'></script>        
		<script src="https://www.b-fonline.com/salesforceresources/SFA/lib/tokenize/Tokenize-2.4/jquery.tokenize.js"></script>
        
        <apex:includeScript value="/lightning/lightning.out.js" />
        
	    <link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/SFA/css/font-awesome.min.css" />
        <link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/SFA/css/accountSurvey.css" />
        <link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/SFA/lib/tokenize/Tokenize-2.4/jquery.tokenize.css" />
		<link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/BootstrapModernPages/css/bootstrap.min.css" />
		<link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/BootstrapModernPages/css/bootstrap-theme.min.css" />
        <link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/SLDS091/assets/styles/salesforce-lightning-design-system-ltng.min.css" />

    </head>
    
    <style>
        @media only screen and (min-width: 801px) {
            dl.rowheader {
                width: 100%;
                overflow: hidden;
                padding: 0;
                margin: 0;
            }
            .dtField {
                float: left;
                width: 25%;
                padding: 0;
                margin: 0;
            }
            .ddField {
                float: left;
                width: 72%;
                padding: 0;
                margin: 0;
            }
            input.fieldInput,
            textarea.fieldInput {
                width: 75%;
            }
        	.dl-horizontal dt {
        		width: 250px !important;
        	}
        	.dl-horizontal dd {
        		margin-left: 100px !important;
        	}
        }
        input.slds-input-clone {
            background-color: white;
            color: #16325c;
            border: 1px solid #d8dde6;
            border-radius: 0.25rem;
            -webkit-transition: border 0.1s linear, background-color 0.1s linear;
            transition: border 0.1s linear, background-color 0.1s linear;
            display: inline-block;
            padding: 0 1rem 0 0.75rem;
            line-height: 2.125rem;
            min-height: calc(2.125rem + 2px); 
            margin-bottom: 0.5rem;
        }
        .sf-font {
            font: 100%/1.5 "Salesforce Sans", Arial, sans-serif;
        }
        .slds-is-required-clone:before {
          content: '*';
          color: #c23934;
          position: absolute;
          left: -0.5rem;
        }
        .requiredField:after {
            content: '*';
            color: #c23934;  
            margin-left: 10px;
        }        
        .overflow {
            height: 200px;
        }
        .options-dropdown {
            float:right;
            margin-left: 5px !important;
            margin-right: 5px !important;
            display: none;
        }
        .options-dropdown-content {
            display: none;
            position: absolute;
            right: 5px;
            background-color: #f9f9f9;
            min-width: 160px;
            overflow: auto;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            font-weight: normal;
            font-size: 75%;
            text-align: right;
        }
        .options-dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }
        .options-dropdown-content a:hover {
            background-color: #f1f1f1;
            text-decoration: none !important;
        }
        .options-show {
            display:block;
        }
        #auraErrorMessage {
        	display: none;
        }
        .Creative_Formats__c:after {
            content: '(include exact specs. ie: Print items A4, A3 etc and Digital - Portrait/landscape)';
            color: #c23934;  
            margin-left: 10px;
        }        
        .Social_Media_Handle__c:after {
        	content: '(include social media handle, followers, reach)';
        	color: #c23934;
        	margin-left: 10px;
        }
    </style>
    
    <script src="{!urlPrefix}/soap/ajax/35.0/connection.js" type="text/javascript"></script>
    <script>
		var isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;        
        var j$ = jQuery.noConflict();
        loading('load', true);

        //Initialize sforce Connection for MetaDataApi calls
        sforce.connection.sessionId = '{!$Api.Session_ID}';
        var urlPrefix = '{!urlPrefix}';
        if(urlPrefix == '/sales'){
            UserContext.siteUrlPrefix = urlPrefix;
            sforce.connection.serverUrl = urlPrefix + sforce.connection.serverUrl;
        }
        
        var headerInfo = [{!serializedPromotion}][0];               //values        
        var headerFS = [{!serializedPromotionFS}][0];           //field set
        console.log('headerFS', headerFS);
        var readOnlyFields = [{!serializedReadOnlyFieldList}][0];
        var relationships = [{!serializedRelationshipList}][0];
        var newPromotion = [{!newPromotion}][0];
        var lookupDialogs = [];
        var promotionId;
        var headerHTML = '';
        var filterHTML = '';
        var promotionHeadersHTML = '';
        var promotionBodyHTML = '';
        var deviceType = '';
        var toggleHTML = '';
        var expandedClass = '';
        var returnURL = '{!$CurrentPage.Parameters.retURL}';
        var callCardId = '{!$CurrentPage.Parameters.ccId}';
        var promotionType = '{!$CurrentPage.Parameters.promotionType}';
        var recordTypeId = '{!$CurrentPage.Parameters.recordTypeId}';
        var thisAccountId = '{!$CurrentPage.Parameters.accountId}';
        var thisAccountName = "{!accountName}";
        var thisAccount = [{!serializedAccount}][0];
        console.log('thisAccount', thisAccount);
        var marketName = "{!marketName}";
        console.log('marketName', marketName);
        var accountChannel = "{!channel}";
        var accountGroup = "{!accountGroup}";
        var accountSubgroup = "{!accountSubgroup}";
        var accountSubgroupType = "{!accountSubgroupType}";
        console.log('channel', accountChannel);
        console.log('group', accountGroup);
        console.log('subgroup', accountSubgroup);
        console.log('subgroupType', accountSubgroupType);
        var canAddMaterialItems = '{!canAddMaterialItems}';
        var closeResultListLabelText = '{!$Label.CloseSearchResults}';
        var redirect = false;
        var inSF1 = false;
        var picklistValuesMap = {};
        var requiredFields = [];
        var hasAccessToCamera = '{!$Permission.AccountVisit_Camera}';
        
        //map to create corresponding HTML input type for Salesforce field type
        var inputTypeMap = {
            'boolean'		: 'checkbox',
            'double'		: 'number',
            'currency'		: 'number',
            'picklist'		: 'select',
            'multipicklist' : 'select',
            'reference'		: 'link',
            'date'			: 'date',
            'datetime'		: 'datetime-local',
            'percent'		: 'number',
            'textarea'		: 'text',
            'string'		: 'text'
        }
           
        const referencedFields = {
            'Account_Channel__c' : { fieldApiName : 'Channel__c' },
            'Group__c' : { fieldApiName: 'Group__c' },
            'SubGroup__c' : { fieldApiName: 'Subgroup__c' },
            'Account_Subgroup_Type__c' : { fieldApiName: 'Subgroup_Type__c' }
        };

        var updatePromotionDetails = function(event) {
            try {
                var activityName = event.getParam("sObjectName");
                let activityId = event.getParam('sObjectId');
                let instanceId = event.getParam('instanceId');
                console.log('promotionActivityName: ', activityName);
                console.log('promotionActivityId: ', activityId);
                console.log('instanceId: ', instanceId);
                
                let fldName = j$("input[field='Name']");
                const promoName = thisAccount.Name + '-' + activityName;
                if (fldName.prop('disabled')) {
                    fldName.text(promoName);
                } else {
                    fldName.val(promoName);
                }
                console.log('name field is disabled: ', fldName.prop('disabled'));
                console.log('name field attr disabled: ', fldName.attr('disabled'));
                console.log('marketName', marketName);
                Promotion_Controller.getPromotionActivity(activityId, function(result, event) {
                    console.log('[getPromotionActivity] event', event);
                    console.log('[getPromotionActivity] result', result);
                    if (event.status) {
                        if (marketName == 'Taiwan') {
                            let beginDate = new Date(result.Begin_Date__c);
                            let formattedBeginDate = beginDate.getFullYear() + '-' + ('0' + (beginDate.getMonth() + 1)).slice(-2) + '-' + ('0' + beginDate.getDate()).slice(-2);         
                            let endDate = new Date(result.End_Date__c);
                            let formattedEndDate = endDate.getFullYear() + '-' + ('0' + (endDate.getMonth() + 1)).slice(-2) + '-' + ('0' + endDate.getDate()).slice(-2);
                            console.log('beginDate', beginDate, formattedBeginDate);
                            console.log('endDate', endDate, formattedEndDate);
                            console.log('promoBrands', result.Promo_Brands__c);
                            j$("input[field='Promotion_Start_Date__c']").val(formattedBeginDate);
                            j$("input[field='Promotion_End_Date__c']").val(formattedEndDate);
                            j$("input[field='Promo_Brands__c']").val(result.Promo_Brands__c);
                            j$("input[field='Promotion_Activity_Type__c']").val(result.Promotion_Type__c);
                        }
                    } else {
                        //handling errors.
                        console.log('error on save. event', event);
                        alert(event.message);
                    }
                });

            }catch(ex) {
                console.log('[updatePromotionDetails] exception', ex);
            }
        };
        
        j$(document).ready(function() { 
            if( (typeof sforce != 'undefined') && (sforce.one != null) ) {
                inSF1 = true;
            }else{
                inSF1 = false;
            }
                        
            //get window width to determine whether or not to use tokenize, 768 = tablet
            //sniff user agent to figure out if it's an iPad because screen resolution varies
            var IS_IPAD = navigator.userAgent.match(/iPad/i) != null;
            if(j$(window).width() >= 992 && !IS_IPAD){
                deviceType = 'desktop';
            }else{
                j$('#expandButton').show();             //for cards layout
                if(j$(window).width() >= 768){
                    deviceType = 'tablet';
                }else{
                    deviceType = 'phone';
                }
            }
            
	        generateOptionsMenu();
            
            if (newPromotion == false) {
                promotionId = headerInfo.Id;
            }
            if (canAddMaterialItems) {
                j$('.addItems').show();
                if (newPromotion == true) {
                    j$('.addItems').button('disabled');
                } else {
                    j$('.addItems').removeAttr('disabled');
                }
            } else {
                j$('.addItems').hide();
            }

            if (hasAccessToCamera == 'true') {
                if (newPromotion == true) {
                    j$('.uploadItems').button('disabled')
                    				  .hide();
                } else {
                    j$('.uploadItems').removeAttr('disabled')
                    				  .show();
                }
            } else {
                j$('.uploadItems').hide();
            }

            //grab all the picklist values for this market's record type and then build out the promotion grid
            j$.when(getPicklistValuesForRecordType('Promotion__c')).then(buildHeaderSection());
            
            j$('#clearForm').click(function(){
                j$('#clearFormModal').modal();
            });
            
            j$('#clearFormConfirm').click(function(){
                clearForm();
            });

            if (marketName != 'Taiwan') {
                j$('.send-notification').hide();
            }
            
            if(deviceType == 'desktop'){
                bindEvents(true);
            }else{
                bindEvents(false);
            }
             
            loading('load', false);
        });
        
        function closePage() {
            returnURL = urlPrefix + '/apex/Account_Visit?id=' + thisAccountId;
            if(inSF1) {
                sforce.one.navigateToURL(returnURL);
            }else{
                window.location.href = returnURL;
            }
        }
        function bindEvents(buildTokenize){         
            j$('.save').click(function(){
                //redirect to returnURL on click of save and close
                if(j$(this).hasClass('saveAndClose')){
                    redirect = true;
                }
                //check for connection, if offline display modal warning
                if(navigator.onLine){
                    j$('.save').button('loading');
                    buildPromotionToSave();
                }else{
                    j$('#offlineModal').modal();
                }           
            });
            j$('.submitapproval').click(function() {
                if(navigator.onLine){
                    j$('.submitapproval').button('loading');
                    submitForApproval();
                }else{
                    j$('#offlineModal').modal();
                }           
            });
            
            //redirect to returnURL
            j$('.cancel').click(function(){
                closePage();
            });
            j$('.addItems').click(function(){
                try {
	                var rUrl = urlPrefix + '/apex/Promotion?promotionType='+promotionType+'&recordTypeId='+recordTypeId+'&accountId='+thisAccountId+'&callcardId='+callCardId+'&id=' + promotionId+'&retUrl='+returnURL;
    	            var newUrl = urlPrefix + '/apex/PromotionMaterialItem_HTML?id='+promotionId+'&fromAccountsNearby=true&retUrl='+returnURL;
                    //alert('additem clicked. inSF1: ' + inSF1 + ', newUrl: ' + newUrl);
                     if (inSF1) {
                         sforce.one.navigateToURL(newUrl);
                     } else {
		                window.location.href = newUrl;
                     }
                }
                catch(err) {
                    console.log('error: ' + err.message);
                }
            });

            j$('.send-notification').click(function() {
                try {
                    console.log('[send-notification] click');
                    var rUrl = urlPrefix + '/apex/Promotion?id='+promotionId;
    	            var newUrl = urlPrefix + '/apex/TWN_Activity_Notice_Flow_Container?recordId='+promotionId+'&retUrl='+rUrl+'&accountId='+thisAccountId+'&callCardId='+callCardId;
                    console.log('rUrl', rUrl);
                    console.log('newUrl', newUrl);
                    if (inSF1) {
                        sforce.one.navigateToURL(newUrl);
                    } else {
                        window.location.href = newUrl;
                    }
                }catch(ex) {
                    console.log('exception:', ex);
                }
            });
            
            //clear all filter options
            j$('#clearFilter').click(function(){
                if(buildTokenize){
                    j$('select.tokenize').each(function(){
                        j$(this).data('tokenize').clear();
                        
                    });
                }else{
                    j$('select.tokenize :selected').removeAttr("selected");
                    filterRows();
                }
            });
            //jump to upload and attach documents page
            j$('.uploadItems').click(function() {                
                var url = urlPrefix + '/apex/account_visit?id=' + thisAccountId + '&jumpToCamera=true&uploadToPromotionId=' + promotionId;
                if (inSF1) {
                    sforce.one.navigateToURL(url);
                } else {
	                window.open(url, '_blank');
                }
            });
            //on click of card header, toggle display
            j$('div.rowHeader').click(function(){
                if(j$(this).siblings('.fields').hasClass('expanded')){
                    j$(this).removeClass('headerShadow').siblings('.fields').removeClass('expanded fieldsShadow').slideUp();
                }else{
                    j$(this).addClass('headerShadow').siblings('.fields').addClass('expanded fieldsShadow').slideDown();
                }
            });
            //either expand or collapse all cards
            j$('#expandButton').click(function(){
                if(j$(this).hasClass('expandBtn')){
                    j$('.fields').addClass('expanded fieldsShadow').slideDown();
                    j$('div.rowHeader').addClass('headerShadow');
                    j$(this).toggleClass('expandBtn collapseBtn').html('{!$Label.Collapse_All}');
                }else{
                    j$('.fields').removeClass('expanded fieldsShadow').slideUp();
                    j$('div.rowHeader').removeClass('headerShadow');
                    j$(this).toggleClass('expandBtn collapseBtn').html('{!$Label.Expand_All}');
                }
                j$('.bg-success').removeClass('bg-success');
            });
            //expand or collapse section
            j$('div.header').click(function(){
                j$(this).siblings().slideToggle();
            });

        }
                
        function buildHeaderSection(){
            //build header info             
            //always add account link
            var accountNavUrl = '';            
            if(inSF1) {
                accountNavUrl = 'javascript:sforce.one.navigateToSObject(\'' + thisAccountId + '\')';
            }else{
                accountNavUrl = urlPrefix + '\\' + thisAccountId;
            }

            headerFS.sort(function(a, b) { return a.index > b.index ? 1 : -1 });
            j$.each(headerFS, function(key, value){
                var thisSectionHTML = '<div id="' + value.name + '" class="section">';
                thisSectionHTML += '<div id="' + value.name + 'Header" class="header btn-info sf-font">' + value.title + '</div>';
                thisSectionHTML += '<dl id="' + value.name + 'headerDL" class="dl-horizontal headerDL left list-group row rowHeader">';
                
                if (value.index == 1) {
                    thisSectionHTML += '<dt class="dtField"  style="margin-bottom: 0.5rem;">{!$ObjectType.Account.Label}</dt><dd class="ddField"><a target="_blank" href="'+accountNavUrl+'">' + thisAccountName + '</a></dd>';
                }

                var requiredHTML = '';
                j$.each(value.fields, function(key, value) {
                    if (value.fieldPath.indexOf('__r') < 0) {
                        requiredHTML = '';
                        if (value.required || value.dbRequired) {
                            requiredHTML = ' requiredField';
                            requiredFields.push(value.fieldPath);
                        }
                        thisSectionHTML += '<dt class="dtField"><div><p class="'+requiredHTML+'">'+value.label+'</p><p class="'+value.fieldPath+'"></p></div></dt><dd class="ddField">'+buildInput(value, headerInfo, 'header')+'</dd>';
                    }
                });
                thisSectionHTML += '</dl></div>';
                headerHTML += thisSectionHTML;
            });
            j$('div#sectionContent').append(headerHTML);
        }
                
        //build out the section header div for each section
        function buildSectionHeader(sectionInfo) {
            var html = '<div id="' + sectionInfo.name + '" class="section">';
            html += '<div id="' + sectionInfo.name + 'Header" class="header btn-info">' + sectionInfo.title + '</div>';
            html += '<dl id="' + sectionInfo.name + 'headerDL" class="dl-horizontal headerDL left list-group row"></dl>';
            html += '</div>';
            return html;
        }
        
        //build out the actual input tags for each type
        function buildInput(obj, section, prodId){
            console.log('obj', obj);
            var html = '';
            var value = eval('headerInfo.'+obj.fieldPath);
            var objectName = 'Promotion__c';

            if(value == undefined){
                value = '';
                if (referencedFields[obj.fieldPath] != undefined) {
                    let fieldApiName = referencedFields[obj.fieldPath].fieldApiName;
                    value = eval('thisAccount.'+fieldApiName);
                    if (value == undefined || value == 'undefined') { value = ''; }
                }                
            }

            var isReadOnly = false;
            var pos = -1;
            if (readOnlyFields != null) {
                pos = readOnlyFields.indexOf(obj.fieldPath);            
            }
            if (pos >= 0) {
                isReadOnly = true;
            }
            
            //build the correct HTML input type, read only in Account Info section if not required on field set
            switch(inputTypeMap[obj.type]){                             
                case 'number':
                    html += '<input id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" step="any" value="'+value+'" class="fieldInput slds-input" ' + (isReadOnly ? 'disabled' : '') + ' />';
                    break;
                case 'select':
                    //if(isReadOnly == true){
                    //    html += '<span style="margin-bottom: 0.5rem;">'+value+'</span>';
                    //}else{
                        html += '<select id="'+obj.fieldPath+'-'+prodId+'" field="'+obj.fieldPath+'" class="fieldInput slds-select" '+(obj.type=="multipicklist"?'multiple':'')+(isReadOnly ? ' disabled' : '')+'><option value=""></option>';
                        var options = getSelectOptions(obj.fieldPath, objectName);
                    console.log('[buildInput.select] field', obj.fieldPath);
                        console.log('[buildInput.select] value', value);
                    console.log('[buildInput.select] options', options);
                        var selected = '';
                        for(var i=0;i<options.values.length;i++){
                            selected = '';
                            if (obj.type == 'multipicklist') {
                                var values = value.split(';');
                                if (values && values.indexOf(options.values[i]) >= 0) { selected = 'selected'; }
                            } else {
                                if (value == options.values[i]) { selected = 'selected'; }
                            }
                            html+= '<option value="'+options.values[i]+'" ' + selected + '>'+options.labels[i]+'</option>';
                            /*
                            if(value == options.values[i]){
                                html+= '<option value="'+options.values[i]+'" selected>'+options.labels[i]+'</option>';
                            }else{
                                html+= '<option value="'+options.values[i]+'">'+options.labels[i]+'</option>';
                            }
                            */
                        }
                        html += '</select>';
                    //}
                    break;
                case 'checkbox':
                    if(isReadOnly == true){
                        html += '<input id="'+obj.fieldPath+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" disabled="disabled" class="fieldInput cmn-toggle cmn-toggle-round-flat"/>';
                        html += '<label for="'+obj.fieldPath+'" class="'+section+'Checkbox"></label>';
                    }else{
                        if(value == true){
                            html += '<input id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" checked="checked" class="fieldInput cmn-toggle cmn-toggle-round-flat"/>';
                        }else{
                            html += '<input id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" class="fieldInput btn cmn-toggle cmn-toggle-round-flat"/>';
                        }
                        html += '<label for="'+obj.fieldPath+prodId+'" class="'+section+'Checkbox"></label>';
                    }                    
                    break;
                case 'link':
                    var relationshipName = obj.fieldPath.replace('__c', '__r');
                    var thisValue = eval("headerInfo." + obj.fieldPath);
                    var infoField = eval("headerInfo." + relationshipName);
                    console.log('thisValue', thisValue);
                    console.log('infoField', infoField);
                    var relatedValue = '';
                    if (infoField != null && infoField != undefined) {
                        relatedValue = infoField.Name;
                    }
                    var lookupField;
                    for(var i = 0; i < relationships.length; i++) {
                        if (relationships[i].name == obj.fieldPath) {
                            lookupField = relationships[i];
                            if (lookupField.nameFieldToReturn != 'Name' && infoField != undefined) {
                                relatedValue = infoField[lookupField.nameFieldToReturn];
                            }
                            break;
                        }
                    }
                                        
                    if (lookupField) {                            
                        html += '<div id="' + obj.fieldPath + '">';

                        $Lightning.use("c:CustomLookup", function() {
                            $Lightning.createComponent(
                                "c:lookupComponent",
                                { searchString: relatedValue, recordId: thisValue, label:obj.fieldPath, pluralLabel: '', sObjectAPIName: lookupField.objectName, nameField: lookupField.nameFieldToReturn, filterClause: lookupField.filter, listIconSVGPath:"/resource/SLDS091/assets/icons/standard-sprite/svg/symbols.svg#"+lookupField.svgClass, listIconClass:"slds-icon-standard-"+lookupField.svgClass, objectLabel: lookupField.objectLabel, closeResultListLabel:closeResultListLabelText, showCreateNewOption: false, isReadOnly: isReadOnly},
                                obj.fieldPath,
                                function(cmp) {
                                    if (marketName == 'Australia' || marketName == 'Taiwan') {
                                    	$A.eventService.addHandler({"event":"c:updateLookupIdEvent", "handler": updatePromotionDetails });
                                    }
                                }
                            );
                        });
                    }
                    break;
                case 'date':
                case 'datetime-local':
                    var d = new Date(value);
                    	try {
                            if (inputTypeMap[obj.type] == 'date') {
	                        	value = d.getFullYear() + '-' + ('0'+(d.getMonth()+1)).substr(-2) + '-' + ('0'+d.getDate()).substr(-2);
                            } else {
	                        	value = d.getFullYear() + '-' + ('0'+(d.getMonth()+1)).substr(-2) + '-' + ('0'+d.getDate()).substr(-2) + 'T'+('0'+d.getHours()).substr(-2) + ':' +('0'+d.getMinutes()).substr(-2);
                            }
                            console.log('value', value);
    	                } catch(ex) {
                            console.log('Exception raised formatting date/datetime value to expected format. '+ex.toString());
        	            }
                    html += '<input id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" class="'+inputTypeMap[obj.type]+'Input slds-input-clone" type="'+inputTypeMap[obj.type]+'" value="'+value+'" ' + (isReadOnly ? 'disabled' : '') + ' />';
                    break;
                default:
                    if (obj.type == 'textarea') {
                        html += '<textarea id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" value="'+value+'" class="fieldInput slds-textarea" row="4" ' + (isReadOnly ? 'disabled' : '') + '>'+value+'</textarea>';
                    } else {
                        html += '<input id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" value="'+value+'" class="fieldInput slds-input" ' + (isReadOnly ? 'disabled' : '') + '/>';
                    }
            } 
            return html;               
        }
        
        function addFieldToLookupDialog(fieldInfo) {
            var fieldParts = fieldInfo.fieldPath.split('.');
            var objectName = fieldParts[0];
            var lookupField = {name:fieldParts[fieldParts.length-1], includeInFilter: fieldInfo.required};
            var index = lookupDialogs.indexOf(objectName);
            if (index < 0) {
                lookupDialog = {
                    objectName: objectName,
                    fields: [lookupField]
                }
            } else {
                lookupDialogs[index].fields.push(lookupField);
            }
        }
        
        //get all picklist values for this market's recordtype
        function getPicklistValuesForRecordType (objectName) {
            var bigString = [];
            var recordTypeName = '{!promotionType}';

            var vl = {};
            var recordTypeMappings = sforce.connection.describeLayout(objectName).recordTypeMappings;
            console.log('recordTypeName', recordTypeName);
            console.log('recordTypeMappings', recordTypeMappings);
            console.log('headerInfo', headerInfo);
            if(recordTypeMappings.length == undefined){
                for(var x=0; x<recordTypeMappings.picklistsForRecordType.length; x++){
                    vl = returnPickListValue(recordTypeMappings.picklistsForRecordType[x]);
                   var field = {
	                    name: recordTypeMappings.picklistsForRecordType[x].picklistName,
                       //values: returnPickListValue(recordTypeMappings.picklistsForRecordType[x])                        
                       values: vl.values,
                       labels: vl.labels
                   };                           
                   bigString.push(field);
               }
            }else{
                for (var i=0; i <recordTypeMappings.length; i++) {
                    if (recordTypeMappings[i].recordTypeId == headerInfo.RecordTypeId){
                        if (recordTypeMappings[i].picklistsForRecordType.length == undefined) {
                            vl = returnPickListValue(recordTypeMappings[i].picklistsForRecordType);
                            var field = {
                                name: recordTypeMappings[i].picklistsForRecordType.picklistName,
                                //values: returnPickListValue(recordTypeMappings[i].picklistsForRecordType) 
                                values: vl.values,
                                labels: vl.labels
                            };                          
                            bigString.push(field);
                        } else {                            
                            for(var x=0; x<recordTypeMappings[i].picklistsForRecordType.length; x++){
                                vl = returnPickListValue(recordTypeMappings[i].picklistsForRecordType[x]);
                                var field = {
                                    name: recordTypeMappings[i].picklistsForRecordType[x].picklistName,
                                    //values: returnPickListValue(recordTypeMappings[i].picklistsForRecordType[x])                        
                                    values: vl.values,
                                    labels: vl.labels
                                };                          
                                bigString.push(field);
                            }
                        }
                    }
                }
            }
            picklistValuesMap[objectName] = bigString;
            console.log('picklistValuesMaps', picklistValuesMap);
        }
        
        //get the individual values
        function returnPickListValue (obj) {
            var values = [];
            var labels = [];
            if (obj.picklistValues) {
                if (obj.picklistValues.label == undefined) {
                    for (var y=0; y <obj.picklistValues.length; y++) {
                        values.push(obj.picklistValues[y].value);
                        labels.push(obj.picklistValues[y].label);
                        }
                } else {
                    values.push(obj.picklistValues.value);
                    labels.push(obj.picklistValues.label);
                }
            }
            return {values: values, labels: labels};
        }
        
        //find the picklist values for this field
        function getSelectOptions(fieldName, objectName){
            for(var i=0;i<picklistValuesMap[objectName].length;i++){
                if(picklistValuesMap[objectName][i].name == fieldName){
                    return picklistValuesMap[objectName][i];
                }
            }
            return {values:[], labels:[]};
        }
        
        function Promotion() {
            this.Id = null;
            this.Name = null;
            this.RecordTypeId = null;
            this.Account__c = null;
            this.CallCard__c = null;
            this.Status__c = 'New';
        }
        
        function buildPromotionToSave(){
            //display loading gif
            loading('save', true);
            
            //save Promotion fields
            //set promotion id on new promotion object
            var promotion = {};                        
            if(!newPromotion){
                if(promotionId == null){
                    promotionId = headerInfo.Id;
                }
                promotion.Id = promotionId;                
                if (headerInfo.Status__c != undefined) {
                    promotion.Status__c = headerInfo.Status__c;
                }
            }else{
                promotion.Id = null;
                promotion.Status__c = 'New';
            }
            promotion.CallCard__c = callCardId;
            promotion.Account__c = headerInfo.Account__c;
            promotion.RecordTypeId = headerInfo.RecordTypeId;

            //loop through each input in the header table and add it's value to our object
            j$('#sectionContent').find('input,select,textarea').each(function(){                
                var fldName = j$(this).attr('field');
                if (j$(this).attr('field') != undefined) {
                    if(j$(this).is(':checkbox')){
                        promotion[fldName] = j$(this).is(':checked');
                    }else if (j$(this).is('select')) {
                        if (j$(this).attr('multiple') == undefined) {
                        	promotion[fldName] = j$(this).val();
                        } else {
                            var vals = j$(this).val();
                            if (vals != null) {
                                if (vals.length > 1) {
		                            promotion[fldName] = j$(this).val().join(';');
                                } else {
	                                promotion[fldName] = vals[0];
                                }
                            }
                        }
                    }else if (j$(this).attr('type') == 'date' || j$(this).attr('type') == 'datetime-local') {
                        var formattedDate = new Date(j$(this).val()).getTime();
                        promotion[fldName] = formattedDate;
                    }else {
                        promotion[fldName] = j$(this).val();
                        if (promotion[fldName] == '' && j$(this).attr('type') == 'number') { promotion[fldName] = null; }
                    }
                }
            });
            for(var i = 0; i < relationships.length; i++) {
                var el = j$('#' + relationships[i].name).find('.' + relationships[i].name + '_lookupId');
                var val = el.html();
                if (val != undefined) {
                    promotion[relationships[i].name] = el.html();
                }
            }
            console.log('promotion', promotion);       
            var errormessage = '';
            for(var i = 0; i < requiredFields.length; i++) {
                if (promotion[requiredFields[i]] == null || promotion[requiredFields[i]] == '') {
                    errormessage += requiredFields[i] + ', ';
                }
            }
            if (errormessage.length > 0) {
                j$('.actionButton').button('reset');
                loading('save',false, 0);
                errormessage = errormessage.substr(0, errormessage.length - 2);
                errormessage = '<p style="font-weight:normal;font-size:small;">The following fields are required:\n</p><p style="font-size:smaller;font-weight:bold;">' + errormessage+'</p>';
                showMessage(errormessage);
            } else {
                j$('#pageMessages').empty();			
                Promotion_Controller.savePromotion(JSON.stringify(promotion), headerFS[0].name, marketName, function(result, event) {
                    if (event.status) {
                        console.log('result', result);
                        newPromotion = false;
                        promotionId = result.Id;
                        headerInfo = result;

                        j$('.addItems').removeAttr('disabled')
                                       .show();
                        
                        if (hasAccessToCamera == 'true') {
                            j$('.uploadItems').removeAttr('disabled')
                                              .show();
                        }
                        if (redirect == true) {
                            closePage();
                        } else {
                            reloadPromotion();
                        }
                    } else {
                        //handling errors.
                        console.log('error on save. event', event);
                        alert(event.message);
                    }
                    j$('.save').button('reset');
                    j$('.save').trigger('blur');
                    loading('save',false);
                });
            }
        }
        function reloadPromotion() {
            try {
                j$.each(headerFS[0].fields, function(key, value) {
                    var val = eval('headerInfo.'+value.fieldPath);
                    if (value.type == 'date' || value.type == 'datetime' || value.type == 'time') {
                        var d = new Date(val);
                        if (inputTypeMap[value.type] == 'date') {
                            val = d.getFullYear() + '-' + ('0'+(d.getMonth()+1)).substr(-2) + '-' + ('0'+d.getDate()).substr(-2);
                        } else {
                            val = d.getFullYear() + '-' + ('0'+(d.getMonth()+1)).substr(-2) + '-' + ('0'+d.getDate()).substr(-2) + 'T'+('0'+d.getHours()).substr(-2) + ':' +('0'+d.getMinutes()).substr(-2);
                        }
                    }
                    j$('input[field="'+value.fieldPath+'"][disabled]').val(val);
                });
            }catch(ex) {
                console.log('[reloadPromotion] exception', ex);
            }
        }

        function submitForApproval() {
            Promotion_Controller.submitForApproval(promotionId, function(result, event) {
                if (event.status) {
                    j$('.submitapproval').button('reset');
                    loading(false);
                    closePage();
                } else {
                    //handling errors.
                    alert(event.message);
                }
            });
        }
                
        //get url param
        function getQueryVariable(variable)
        {
           var query = window.location.search.substring(1);
           var vars = query.split("&");
           for (var i=0;i<vars.length;i++) {
               var pair = vars[i].split("=");
               if(pair[0] == variable){return pair[1];}
           }
           return(false);
        }
        
        //toggle loading gif and saved message
        function loading(val, visible) {
            if (val == 'load') {
                if (visible) {
                    j$("#loadingMessage").fadeIn(100).css("display","inline").css("visibility","visible");
                } else {
                    j$("#loadingMessage").fadeOut();
                }
            } else if (val == 'save') {
                if (visible) {
                    j$(".savedMessage").fadeIn(100).css("display","inline").css('visibility','visible');
                }
                else {
                    j$(".savedMessage").fadeIn(100).css("display","inline").delay(3000).fadeOut();    
                }
            }
        }
                
        function clearForm(){
            j$('#content input,select').val('');
            j$('#content .lookup').html('');          
            j$('#content .btn-group').find('button').addClass('btn-default').removeClass('btn-primary');
            j$('#content input:checkbox').prop('checked',false);
            j$('.addItems').hide();
        }
        function showMessage(msg) {
            j$('#pageMessages').empty()
            				  .append('<p>'+msg+'</p>');
        }
        function showOptionsDropdown() {
        	document.getElementById("optionsMenuDropdown").classList.toggle("show");
        }
        // Close (Overflow/More) Options menu when not clicked on                              
        window.onclick = function(event) {
        	if (!event.target.matches('.optionMenuButton')) {
                var dropdowns = document.getElementsByClassName("options-dropdown-content");
                var i;
                for (i = 0; i < dropdowns.length; i++) {
                    var openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        openDropdown.classList.remove('show');
                    }
                }
            }
        }
        
        // Generate (Overflow/More) Options menu based on JSON
        function generateOptionsMenu() {
            // Menu definition from Market Object
            var menu = {!serializedMenuJSON}
            // Show menu if menu definition has > 0 elements
            if(menu.length > 0)
                j$('#overflowmenu').show();
            
            // Add links to menu
            var menuDiv = j$("#optionsMenuDropdown");
            menu.forEach(function(element) {
                // Create base link element
                var a = document.createElement('a');
                var linkText = document.createTextNode(element.label);
                a.appendChild(linkText);
                // Add link if present (not advanced button) -- process link for sf1 detection and urlprefix
                if(element.link) {
                    // If link starts with http, paste straight in (external link), otherwise is Salesforce link and process
                    if(element.link.startsWith("http")) {
                        // Detect if in Salesforce1 or not
                        if(inSF1) {
                            a.href = 'javascript:sforce.one.navigateToURL("' + urlPrefix + element.link + '", ' + element.SF1isRedirect +')';
                        } else {
                            a.href = element.link;
                            a.setAttribute("target", element.target);
                        }
                    } else {
                        // Detect if in Salesforce1 or not
                        if(inSF1) {
                            a.href = 'javascript:sforce.one.navigateToURL("' + urlPrefix + element.link + '", ' + element.SF1isRedirect +')';
                        } else {
                            a.href = urlPrefix + element.link;
                            a.setAttribute("target", element.target);
                        }
                    }
                } else {
                    // Advaned button, define button behavior based on name
                    
                    // Accounts Nearby (This Account)
                    if(element.name == "Accounts_Nearby_This_Account") {
	                    // Detect if in Salesforce1 or not
                        if(inSF1) {
                            a.href = 'javascript:sforce.one.navigateToURL("' + urlPrefix + '/apex/AccountsNearby?id=' + thisAccountId + '", ' + element.SF1isRedirect +')';
                        } else {
                            a.href = urlPrefix + '/apex/AccountsNearby?id=' + thisAccountId;
                            a.setAttribute("target", element.target);
                        }
                    }
                }
                
                // Add to menu
                menuDiv.append(a);
            });
        }
        
    </script>
    <div class="bootstrap" style="height:100%">
        <div class="container-fluid theme-showcase" role="main">
            <div id="topButtonDiv" class="buttonDiv text-center">
                <button type="button" value="{!$Label.Save}" class="btn button actionButton save bg-primary" data-role="none" data-loading-text="{!$Label.Saving}">{!$Label.Save}</button>
                <button type="button" value="{!$Label.Save_and_Close}" class="btn button actionButton save saveAndClose bg-primary" data-role="none" data-loading-text="{!$Label.Saving}">{!$Label.Save_and_Close}</button>
                <button type="button" value="{!$Label.Cancel}" class="btn button actionButton cancel bg-primary" data-role="none">{!$Label.Cancel}</button>
                <button type="button" value="{!$Label.Submit_For_Approval}" class="btn button actionButton submitapproval bg-primary" data-role="none" data-loading-text="{!$Label.Submit_For_Approval}">{!$Label.Submit_For_Approval}</button>
                <button type="button" value="{!$Label.Upload_and_Attach}" class="btn button actionButton uploadItems bg-primary" data-role="none" disabled="disabled">{!$Label.Upload_and_Attach}</button>
                <button type="button" value="{!$Label.Send_Notification}" class="btn button actionButton send-notification bg-primary" data-role="none">{!$Label.Send_Notification}</button>
                <button type="button" value="{!$Label.Add_Edit_Items}" class="btn button actionButton addItems bg-primary" data-role="none" disabled="disabled">{!$Label.Add_Edit_Items}</button>
                <div id="savedMessage" class="savedMessage" style="display:none">
                    {!$Label.Saved}
                    <apex:pagemessages id="messages"/>
                </div>
                <div id="loadingMessage" class="savedMessage" style="display:inline">
                    {!$Label.Loading}<!--<img src="{!URLFOR($Resource.SFA, '/img/transparentLoading.gif')}"/>-->
                    <img src="https://www.b-fonline.com/salesforceresources/SFA/img/transparentLoading.gif" />
                    <apex:pageMessages id="loadingMessages"></apex:pageMessages>
                </div>
                <div class="options-dropdown" id='overflowmenu'>
                    <button id="optionMenuButton" type="button" class="btn-sm btn-flat btn-info optionMenuButton" onclick="showOptionsDropdown()">&#x22EE;</button>
                    <div id="optionsMenuDropdown" class="options-dropdown-content"></div>
                </div>
                
            </div>
            <div id="pageMessages" style="text-align:center;color:red;font-weight:bold;">
                
            </div>
            <div style="float:left;">
                <span class="requiredField" style="margin-left: 20px; margin-right: 10px;"></span><span style="font-size: x-small;font-weight:bold;">{!$Label.AsteriskDenotesRequireField}</span>
            </div>
            
            <div id="sectionContent" class="slds">
                
            </div>
            <div class="clear"></div>
            <div id="bottomButtonDiv" class="buttonDiv text-center">
                <button type="button" value="{!$Label.Save}" class="btn button actionButton save bg-primary" data-loading-text="{!$Label.Saving}">{!$Label.Save}</button>
                <button type="button" value="{!$Label.Save_and_Close}" class="btn button actionButton save saveAndClose bg-primary" data-loading-text="{!$Label.Saving}">{!$Label.Save_and_Close}</button>
                <button type="button" value="{!$Label.Cancel}" class="btn button actionButton cancel bg-primary">{!$Label.Cancel}</button>
                <button type="button" value="{!$Label.Submit_For_Approval}" class="btn button actionButton submitapproval bg-primary" data-role="none" data-loading-text="{!$Label.Submit_For_Approval}">{!$Label.Submit_For_Approval}</button>
                <button type="button" value="{!$Label.Upload_and_Attach}" class="btn button actionButton uploadItems bg-primary" data-role="none" disabled="disabled">{!$Label.Upload_and_Attach}</button>
                <button type="button" value="{!$Label.Send_Notification}" class="btn button actionButton send-notification bg-primary" data-role="none">{!$Label.Send_Notification}</button>
                <button type="button" value="{!$Label.Add_Edit_Items}" class="btn button actionButton addItems bg-primary" data-role="none" disabled="disabled">{!$Label.Add_Edit_Items}</button>
                <div class="loadingImage" style="display:none">
                    <img src="{!URLFOR($Resource.SFA, '/img/transparentLoading.gif')}"/>
                </div>
                <div class="savedMessage" style="display:none">
                    {!$Label.Saved}
                </div>
            </div>
            <div id="offlineModal" class="modal fade" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">{!$Label.No_Connection}</h4>
                        </div>
                        <div class="modal-body">
                            <p>{!$Label.Find_Connection}</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">{!$Label.Close}</button>
                        </div>
                    </div>
                </div>
            </div>
            <div id="clearFormModal" class="modal fade" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">{!$Label.Clear_Form}</h4>
                        </div>
                        <div class="modal-body">
                            <p>{!$Label.Clear_Form_Confirm}</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">{!$Label.Cancel}</button>
                            <button id="clearFormConfirm" type="button" value="{!$Label.Clear_Form}" class="btn button clearForm btn-danger" data-dismiss="modal" onclick="clearForm()" >{!$Label.Clear_Form}</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--<script src="{!URLFOR($Resource.bootstrapmodernp, '/startbootstrap-modern-business-gh-pages/js/bootstrap.min.js')}"></script>-->
    <script src="https://www.b-fonline.com/salesforceresources/BootstrapModernPages/js/bootstrap.min.js"></script>
    <script> 
        (function(){try{var a=navigator.userAgent; 
                        if((a.indexOf('Salesforce')!=-1)&&(a.indexOf('iPhone')!=-1||a.indexOf('iPad')!=-1)&&(a.indexOf('Safari')==-1)){ 
        var s=document.createElement('style'); 
        s.innerHTML="html,html body{overflow: auto;-webkit-overflow-scrolling:touch;}body{position:absolute;left:0;right:0;top:0;bottom:0;}"; 
        document.getElementsByTagName('head')[0].appendChild(s);}}catch(e){}})(); 
        window.onkeydown=function(){window.focus();}
    </script> 
</apex:page>